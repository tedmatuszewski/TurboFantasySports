name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master

env:
  AZURE_FUNCTIONAPP_NAME: 'FA-TurboFantasySports'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './jobs'       # set this to the path to your function app project, defaults to the repository root
  NODE_VERSION: '20.x'                      # set this to the node version to use (e.g. '8.x', '10.x', '12.x')
  
jobs:
  build_and_deploy_client:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ICY_GLACIER_0D433E810 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "./client" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "dist" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

      - name: Publish DotNet
        # You may pin to the exact commit or the version.
        # uses: SpringHgui/publish-nuget@318141dafb318302e5febaae090f69b519a673fa
        uses: SpringHgui/publish-nuget@1.0.1
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: '**/jobs.csproj' 
          # NuGet package id, used for version detection & defaults to project name
          #PACKAGE_NAME: # optional
          # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
          #VERSION_FILE_PATH: # optional
          # Regex pattern to extract version info in a capturing group
          #VERSION_REGEX: # optional, default is ^\s*<(Package|)Version>(.*)<\/(Package|)Version>\s*$
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          #VERSION_STATIC: # optional
          # Flag to toggle git tagging, enabled by default
          #TAG_COMMIT: # optional, default is true
          # Format of the git tag, [*] gets replaced with actual version
          #TAG_FORMAT: # optional, default is v*
          # API key to authenticate with NuGet server
          #NUGET_KEY: # optional
          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          #NUGET_SOURCE: # optional, default is https://api.nuget.org
          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          #INCLUDE_SYMBOLS: # optional      
  
      # - name: Azure Functions Action
      #   uses: Azure/functions-action@v1.5.1
      #   with:
      #     # Name of the Azure Function App
      #     app-name: 
      #     # Path to package or folder. *.zip or a folder to deploy
      #     package: # optional, default is .
      #     # Function app slot to be deploy to
      #     slot-name: # optional
      #     # Publish profile (*.publishsettings) file contents with web deploy secrets
      #     publish-profile: # optional
      #     # Automatically look up Java function app artifact from pom.xml (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
      #     respect-pom-xml: # optional, default is false
      #     # Remove unwanted files defined in .funcignore file (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
      #     respect-funcignore: # optional, default is false
      #     # Enable build action from Kudu when the package is deployed onto the function app. This will temporarily change the SCM_DO_BUILD_DURING_DEPLOYMENT setting for this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'enable-oryx-build' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
      #     scm-do-build-during-deployment: # optional, default is false
      #     # Use Oryx Build from Kudu when the package is deployed onto the function app. (Linux functions only). This will temporarily change the ENABLE_ORYX_BUILD setting from this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'scm-do-build-during-deployment' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
      #     enable-oryx-build: # optional, default is false
                
